/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as ErrorImport } from "./routes/error";
import { Route as PanelImport } from "./routes/_panel";
import { Route as AuthImport } from "./routes/_auth";
import { Route as PanelLayoutImport } from "./routes/_panel/_layout";
import { Route as AuthSignInImport } from "./routes/_auth/sign-in";
import { Route as PanelLayoutIndexImport } from "./routes/_panel/_layout/index";

// Create/Update Routes

const ErrorRoute = ErrorImport.update({
  id: "/error",
  path: "/error",
  getParentRoute: () => rootRoute,
} as any);

const PanelRoute = PanelImport.update({
  id: "/_panel",
  getParentRoute: () => rootRoute,
} as any);

const AuthRoute = AuthImport.update({
  id: "/_auth",
  getParentRoute: () => rootRoute,
} as any);

const PanelLayoutRoute = PanelLayoutImport.update({
  id: "/_layout",
  getParentRoute: () => PanelRoute,
} as any);

const AuthSignInRoute = AuthSignInImport.update({
  id: "/sign-in",
  path: "/sign-in",
  getParentRoute: () => AuthRoute,
} as any);

const PanelLayoutIndexRoute = PanelLayoutIndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => PanelLayoutRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/_auth": {
      id: "/_auth";
      path: "";
      fullPath: "";
      preLoaderRoute: typeof AuthImport;
      parentRoute: typeof rootRoute;
    };
    "/_panel": {
      id: "/_panel";
      path: "";
      fullPath: "";
      preLoaderRoute: typeof PanelImport;
      parentRoute: typeof rootRoute;
    };
    "/error": {
      id: "/error";
      path: "/error";
      fullPath: "/error";
      preLoaderRoute: typeof ErrorImport;
      parentRoute: typeof rootRoute;
    };
    "/_auth/sign-in": {
      id: "/_auth/sign-in";
      path: "/sign-in";
      fullPath: "/sign-in";
      preLoaderRoute: typeof AuthSignInImport;
      parentRoute: typeof AuthImport;
    };
    "/_panel/_layout": {
      id: "/_panel/_layout";
      path: "";
      fullPath: "";
      preLoaderRoute: typeof PanelLayoutImport;
      parentRoute: typeof PanelImport;
    };
    "/_panel/_layout/": {
      id: "/_panel/_layout/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof PanelLayoutIndexImport;
      parentRoute: typeof PanelLayoutImport;
    };
  }
}

// Create and export the route tree

interface AuthRouteChildren {
  AuthSignInRoute: typeof AuthSignInRoute;
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthSignInRoute: AuthSignInRoute,
};

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren);

interface PanelLayoutRouteChildren {
  PanelLayoutIndexRoute: typeof PanelLayoutIndexRoute;
}

const PanelLayoutRouteChildren: PanelLayoutRouteChildren = {
  PanelLayoutIndexRoute: PanelLayoutIndexRoute,
};

const PanelLayoutRouteWithChildren = PanelLayoutRoute._addFileChildren(
  PanelLayoutRouteChildren,
);

interface PanelRouteChildren {
  PanelLayoutRoute: typeof PanelLayoutRouteWithChildren;
}

const PanelRouteChildren: PanelRouteChildren = {
  PanelLayoutRoute: PanelLayoutRouteWithChildren,
};

const PanelRouteWithChildren = PanelRoute._addFileChildren(PanelRouteChildren);

export interface FileRoutesByFullPath {
  "": typeof PanelLayoutRouteWithChildren;
  "/error": typeof ErrorRoute;
  "/sign-in": typeof AuthSignInRoute;
  "/": typeof PanelLayoutIndexRoute;
}

export interface FileRoutesByTo {
  "": typeof PanelRouteWithChildren;
  "/error": typeof ErrorRoute;
  "/sign-in": typeof AuthSignInRoute;
  "/": typeof PanelLayoutIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/_auth": typeof AuthRouteWithChildren;
  "/_panel": typeof PanelRouteWithChildren;
  "/error": typeof ErrorRoute;
  "/_auth/sign-in": typeof AuthSignInRoute;
  "/_panel/_layout": typeof PanelLayoutRouteWithChildren;
  "/_panel/_layout/": typeof PanelLayoutIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: "" | "/error" | "/sign-in" | "/";
  fileRoutesByTo: FileRoutesByTo;
  to: "" | "/error" | "/sign-in" | "/";
  id:
    | "__root__"
    | "/_auth"
    | "/_panel"
    | "/error"
    | "/_auth/sign-in"
    | "/_panel/_layout"
    | "/_panel/_layout/";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  AuthRoute: typeof AuthRouteWithChildren;
  PanelRoute: typeof PanelRouteWithChildren;
  ErrorRoute: typeof ErrorRoute;
}

const rootRouteChildren: RootRouteChildren = {
  AuthRoute: AuthRouteWithChildren,
  PanelRoute: PanelRouteWithChildren,
  ErrorRoute: ErrorRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_auth",
        "/_panel",
        "/error"
      ]
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/sign-in"
      ]
    },
    "/_panel": {
      "filePath": "_panel.tsx",
      "children": [
        "/_panel/_layout"
      ]
    },
    "/error": {
      "filePath": "error.tsx"
    },
    "/_auth/sign-in": {
      "filePath": "_auth/sign-in.tsx",
      "parent": "/_auth"
    },
    "/_panel/_layout": {
      "filePath": "_panel/_layout.tsx",
      "parent": "/_panel",
      "children": [
        "/_panel/_layout/"
      ]
    },
    "/_panel/_layout/": {
      "filePath": "_panel/_layout/index.tsx",
      "parent": "/_panel/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
